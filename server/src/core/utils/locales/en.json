{
	"main.init": "Init server",
	"main.initialized": "Server is running on Port:",
	"main.error": "An error occurred while initializing the server",
	"main.load_routes": "Load routes of api",
	"main.load_socket": "Load handler socket",
	"database.init": "Database init",
	"database.error": "Error in create database schema",
	"database.rsync": "Drop or Rsync Database",
	"database.rsync_error": "Error in Drop or Rsync Database",
	"database.not_found": "Database not found",
	"authentication.created": "User registered successfully!",
	"authentication.not_found": "User not found!",
	"authentication.invalid_password": "Invalid password!",
	"socket.init": "Setup socket.io",
	"socket.connection": "New connection",
	"socket.disconnect": "User disconnected",
	"socket.check_notifications": "Check notifications",
	"authorizejwt.create_token": "Create token",
	"authorizejwt.check_token": "Check token",
	"authorizejwt.no_token": "No token provided",
	"authorizejwt.invalid_token": "Invalid token",
	"authorizeroles.verify": "Verify roles",
	"authorizeroles.not_allowed": "User not allowed",
	"authorizeroles.requires": "Requires to be a",
	"sequelize.load_models": "Load models",
	"user.post_not_found": "User not found",
	"user.post_saved": "User saved",
	"user.auth_not_found": "User not found",
	"user.auth_unable_authenticate": "Unable to authenticate user",
	"user.auth_success": "Logged in successfully",
	"user.auth_found": "User context found",
	"user.auth_saved": "User saved",
	"notification.founded": "Notification founded",
	"notification.not_founded": "Notification not founded",
	"notification.saved": "Notification saved",
	"notification.not_saved": "Notification not save"
}